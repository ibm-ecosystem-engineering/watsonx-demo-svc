# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ApproveCaseInput {
  customerOutreach: String!
  documents: [DocumentInput!]!
  id: ID!
}

"""KYC Customer"""
type Customer {
  countryOfResidence: String!
  name: String!
  personalIdentificationNumber: String!
  riskCategory: String!
}

input CustomerInput {
  countryOfResidence: String!
  name: String!
  personalIdentificationNumber: String!
  riskCategory: String!
}

"""Customer risk assessment"""
type CustomerRiskAssessment {
  result: String!
}

"""Data extraction question"""
type DataExtractionQuestion {
  id: ID!
  inScope: Boolean!
  question: String!
}

"""Data extraction question input"""
input DataExtractionQuestionIdInput {
  id: ID!
}

"""Data extraction result"""
type DataExtractionResult {
  expectedResponse: String!
  id: ID!
  inScope: Boolean!
  question: String!
  watsonxResponse: String!
}

"""KYC Document"""
type Document {
  id: ID!
  name: String!
  path: String!
}

input DocumentInput {
  name: String!
  path: String!
}

"""greeting"""
type Greeting {
  greeting: String!
}

"""KYC Case"""
type KycCase {
  counterparty: Person
  counterpartyNegativeScreening: NegativeScreening
  customer: Customer!
  customerOutreach: String
  customerRiskAssessment: CustomerRiskAssessment
  documents: [Document!]!
  id: ID!
  negativeScreening: NegativeScreening
  status: String!
}

type Mutation {
  addDocumentToCase(caseId: ID!, documentName: String!, documentPath: String!): KycCase!
  approveCase(case: ApproveCaseInput!): KycCase!
  createCase(customer: CustomerInput!): KycCase!
  reviewCase(case: ReviewCaseInput!): KycCase!
}

"""Negative screening"""
type NegativeScreening {
  result: String!
}

"""KYC Person"""
type Person {
  countryOfResidence: String!
  name: String!
}

input PersonInput {
  countryOfResidence: String!
  name: String!
}

type Query {
  extractDataForQuestion(customer: String!, question: DataExtractionQuestionIdInput!): DataExtractionResult!
  extractDataForQuestions(customer: String!, questions: [DataExtractionQuestionIdInput!]!): [DataExtractionResult!]!
  getCase(id: ID!): KycCase!
  helloWorld: Greeting!
  listCases: [KycCase!]!
  listQuestions: [DataExtractionQuestion!]!
}

input ReviewCaseInput {
  counterparty: PersonInput!
  customerOutreach: String
  documents: [DocumentInput!]!
  id: ID!
}

type Subscription {
  extractDataObservable(customer: String!, questions: [DataExtractionQuestionIdInput!]!): [DataExtractionResult!]!
  subscribeToCases: [KycCase!]!
}